Adapter
寫一個類別幫助一個物件裝置在另一個物件上,轉接器,界接,很像代理人
兩者之間不認識,透過中間的代理人作為連接
格式不同,做法一樣,介面一樣
課堂舉例: 電線的頭是三孔的,插座是兩孔的,處理方式? 轉接器

EX: 像我近視,我的 "眼睛" 看不到眼前的 "事物" , 我透過 "眼鏡" 的轉接器處理,
    讓我的 "眼睛" 可以接收到我眼前的 "事物" , 因此 "眼鏡"就是轉接器 !!!!!!!
-------------------------------------------------------------
Bridge
傳個function給一個物件,但規格格式要依照function的規定去處理,實作是分開的
格式相同,做法不同
課堂舉例: 某某某想要使用C9發送Email,但是不能發送,因此界接使用另外一個平台來發送Email
          以及 畫圓

EX: 想不到
-------------------------------------------------------------
Decorator
一直包裝上去一直往外包,一層一層進去,一層一層遞迴

function attach (Animal $objAnaimal)
$objAnaimal 指定型態類別為 Animal

$result = $obj instanceof Animal;
instanceof 讀取$obj判斷是不是Animal類別,是的話傳回1給$result,否則傳回F

EX: 我想知道我的存錢筒內有多少錢,
    因此我問桌子,桌子問抽屜,抽屜問存錢筒,存錢筒問裡面有多少,
    再將問完結果的值,一層一層的遞迴, 結果>存錢筒>抽屜>桌子>我
-------------------------------------------------------------
Facade
與Adapter作法相似,是將眾多的class重新包裝成一個更好用的class
課堂舉例:有個功能是字串轉成陣列,有個功能是將自行反轉(大寫換小寫小寫換大寫,前後倒過來)
         還有個功能是陣列轉成字串,當我需要將一串文字反轉時候需要經過三個class
         所以我將這三個class重新包裝成一個更好用更方便的class,
         因此我只需要經過一個class就可以就可以得到我想要的答案
         
EX: 像是販賣機,只接受硬幣,不接受鈔票,因此在旁邊會擺設鈔票換硬幣的機台,
    有人想投販賣機的話又沒硬幣,只能先去鈔票換硬幣,再用硬幣去投販賣機得到想要的結果,
    因此將兩者合而為一,形成可接受鈔票也可接受硬幣又可找零的販賣機,
    使用者就可以更方便的直接使用販賣機了
-------------------------------------------------------------
Factory [工廠模式]
工廠模式,製造過程不一樣,但是都會有相同結果,
例如: 7-11有賣咖啡,全家也有賣咖啡,兩邊製造過程都是一樣的,就是 "被喝"

EX: 像是製造球鞋球衣的工廠一樣,來自世界各地的加工,但是最終結果出來的衣服是 "被穿"
-------------------------------------------------------------
Prototype
clone 複製,內容屬性皆相同複製, 使用clone的原因可以說是
因為成本較高,clone可以直接複製使用,例如:個人寫書出書難,但是抄襲仿作簡單
先做完複製才做 function __clone() 可自行增加另外想要的功能

EX: 像是加盟店,一間店已經有完整架構流程制度以及產品管理,
    想要個人創業就比較困難要從頭用起,因此加盟別人的連鎖,得到一樣的架構流程制度以及產品
    之後可再加以改造自己想要多的服務功能等(如function __clone()的功能)
-------------------------------------------------------------
Singleton 
只有一個!
課堂舉例: 一家店有取號機,但是不能有兩台,因為號碼牌不能衝突,同一時間只有一個號碼,不能重複
          或者是圖書館借書,只有一本書,同一時間只能借一個人
          
EX: 像是健身房的器材,我正在使用這個器材,那相對這個時間點其他人就目前不能使用,
    只能等我用完,才可以使用
-------------------------------------------------------------
Command [命令模式]
很像開關功能on跟off,不必要時關閉不使用,需要時在乎叫出來使用,如同switch選擇器

EX: A需要甲功能,B需要乙功能,C需要丙功能,D....E...都各自需要不同功能,
    將功能重新整理後,並將每項不能功能逐一加入指令,在需要的時候指定使用該功能
    
    也很像我有很多衣服裝通通亂放在房間裡,那我將它依依整理後放置在衣櫃裡面,
    並且編號什麼場合什麼衣服,假如我現在要參加婚禮,我就將有編號婚禮的西裝取出來使用,
    其他的服裝仍然在衣櫃裡面不動的待命
-------------------------------------------------------------
Interpreter

-------------------------------------------------------------
Observer [觀察者模式]
定義了物件之間一對多關係,如此一來當一個物件改變狀態，其他相依者都會收到通知並自動更新
因為當一個物件的狀態改變時,與此物件的狀態有關的其他相依物件都會被通知而做出因應的變更
當物件的狀態改變會相對促使其他物件連帶因應改變時,就適用此模式 (網)
網路舉例: 報社就是一個主題,而客戶是觀察者,因此 主題 + 觀察者 = 觀察者模式
          客戶有需求才會向報社訂閱報紙,因此有了客戶名字在清單上,就會持續收到新報紙,
          當客戶不想看到報紙時只要取消訂閱,報社就不會再送報紙給你,因為在訂閱戶名單上,
          你同時也會被除名了,只要報社"還在營運",就會一直有客戶向報社"訂閱報紙" 或 "取消訂閱"
          
EX: 如同訂報紙一樣,我訂羊奶,我有要求我才會去訂,有了名字在清單上,會持續收到,
    取消的話則清單上已刪除我的名字,不再送羊奶到我家
    因為我的狀態改變,因此廠商也跟著我的改變而作出相應的變更
-------------------------------------------------------------